/*** Events ***/
Blockly.Python.events_tank_start = function(block) {
    let today  = new Date();
    Blockly.Python.headers_.startLine = "###############################################";
    Blockly.Python.headers_.code      = "# Code automatically generated by MangoBlock";
    Blockly.Python.headers_.date      = "# Date: " + today.toLocaleString();
    Blockly.Python.headers_.endLine   = "###############################################";
    block.disabled || (
        Blockly.Python.definitions_.import_mango_motor = "from mango.x2 import motor",
        Blockly.Python.definitions_.import_mango_rgb = "from mango.x2 import rgb",
        Blockly.Python.definitions_.import_mango_utils = "from mango import utils",
        Blockly.Python.definitions_.import_board = "import board",
        Blockly.Python.definitions_.import_utime = "import utime"
    );
    Blockly.Python.declares_["let_motor_init"] = "motor.tankState.reset()";
    let code = "\n";
    return code;
};

/*** Chip ***/
Blockly.Python.tank_pinout = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_machine_pin"] = "from machine import Pin"
    );
    let pin = block.getFieldValue('PIN');
    return [pin, Blockly.Python.ORDER_NONE];
};

/*** display: rgb ***/

/*** display: oled ***/
Blockly.Python['tank_oled_default'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_.import_mango_display = "from mango import display"
    );
    // TODO: turn wheels on.
    let code = ``;
    return code;
};
Blockly.Python['tank_oled_slot'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_.import_mango_display = "from mango import display",
        Blockly.Python.definitions_.import_board = "import board"
    );
    let i2c_number = 0;
    let width = Blockly.Python.valueToCode(block, 'WIDTH', Blockly.Python.ORDER_ATOMIC);
    let height = Blockly.Python.valueToCode(block, 'HEIGHT', Blockly.Python.ORDER_ATOMIC);
    // TODO: turn wheels on.
    let code = ``;
    code += `display.oled = display.init(${i2c_number}, board.PIN_SCL, board.PIN_SDA, ${width}, ${height})`;
    Blockly.Python.declares_["let_display_oled"] = code;
    return "";
};

/*** sensor: ultrasound ***/
Blockly.Python['tank_ultrasound_init'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_.import_mango_mus025 = "from mango import mus025"
    );
    let port_num = block.getFieldValue('PORT_NUM');
    let code = `dist_sensor = mus025.MUS025()\n`;
    code += `dist_sensor.port(${port_num})`;
    Blockly.Python.declares_["let_dist_sensor"] = code;
    return "";
};


/*** sensor: line follower ***/
Blockly.Python['tank_line_follower_init'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_.import_mango_mit500 = "from mango import mit500"
    );
    let port_num = block.getFieldValue('PORT_NUM');
    let code = `line_sensor${port_num} = mit500.MIT500(${port_num})`;
    Blockly.Python.declares_[`let_line_sensor${port_num}`] = code;

    return "";
};
Blockly.Python['line_follower_read_left'] = function(block) {
    let port_num = block.getFieldValue('PORT_NUM');
    let code = `line_sensor${port_num}.get_left_sensor()`;
    return [code, Blockly.Python.ORDER_FUNCTION_CALL];
};
Blockly.Python['line_follower_read_right'] = function(block) {
    let port_num = block.getFieldValue('PORT_NUM');
    let code = `line_sensor${port_num}.get_right_sensor()`;
    return [code, Blockly.Python.ORDER_FUNCTION_CALL];
};

/*** sensor: I2C line follower ***/
Blockly.Python['i2c_line_follower_init'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_.import_machine_i2c = "from machine import I2C",
        Blockly.Python.definitions_.import_mango_sx1508 = "from mango import sx1508",
        Blockly.Python.definitions_.import_board = "import board"
    );    
    let code = 'i2c = I2C(0, scl=board.SCL, sda=board.SDA)\n';
    code += `line_follower = sx1508.SX1508_LineFollower(i2c)`;
    Blockly.Python.declares_[`let_line_follower`] = code;

    return "";
};
Blockly.Python['i2c_line_follower_read'] = function(block) {
    let port_num = block.getFieldValue('PORT_NUM');
    let code = `sensor.digitalRead(${port_num})`;
    return [code, Blockly.Python.ORDER_FUNCTION_CALL];
};


/*** Robot Car Operations: motor ***/
Blockly.Python['tank_move_forward'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_["import_mango_motor"] = "from mango.x2 import motor",
        Blockly.Python.definitions_["import_utime"] = "import utime"
    );
    let value_power = Blockly.Python.valueToCode(block, 'POWER', Blockly.Python.ORDER_ATOMIC);
    let value_wait = Blockly.Python.valueToCode(block, 'WAIT', Blockly.Python.ORDER_ATOMIC);
    let ms_wait = value_wait * 1000;
    value_power = trimBrackets(value_power);
    // TODO: move robot-car to forward.
    let code = `# forward\n`;
    code += `motor.tank_forward(${value_power})\n`;
    //code += `motor.tank_wait_to_stop(${ms_wait})\n`;
    code += `utime.sleep(${value_wait})\n`;
    code += `motor.tank_stop()\n`;
    return code;
};
Blockly.Python['tank_move_backward'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_["import_mango_motor"] = "from mango.x2 import motor",
        Blockly.Python.definitions_["import_utime"] = "import utime"
    );
    let value_power = Blockly.Python.valueToCode(block, 'POWER', Blockly.Python.ORDER_ATOMIC);
    let value_wait = Blockly.Python.valueToCode(block, 'WAIT', Blockly.Python.ORDER_ATOMIC);
    let ms_wait = value_wait * 1000;
    value_power = trimBrackets(value_power);
    // TODO: move robot-car to forward.
    let code = `# backward\n`;
    code += `motor.tank_backward(${value_power})\n`;
    //code += `motor.tank_wait_to_stop(${ms_wait})\n`;
    code += `utime.sleep(${value_wait})\n`;
    code += `motor.tank_stop()\n`;
    return code;
};
Blockly.Python['tank_turn_left'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_["import_mango_motor"] = "from mango.x2 import motor",
        Blockly.Python.definitions_["import_utime"] = "import utime"
    );
    let value_power = Blockly.Python.valueToCode(block, 'POWER', Blockly.Python.ORDER_ATOMIC);
    let value_wait = Blockly.Python.valueToCode(block, 'WAIT', Blockly.Python.ORDER_ATOMIC);
    let ms_wait = value_wait * 1000;
    value_power = trimBrackets(value_power);
    // TODO: move robot-car to forward.
    let code = `# turn left\n`;
    code += `motor.tank_left(${value_power})\n`;
    //code += `motor.tank_wait_to_stop(${ms_wait})\n`;
    code += `utime.sleep(${value_wait})\n`;
    code += `motor.tank_stop()\n`;
    return code;
};
Blockly.Python['tank_turn_right'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_["import_mango_motor"] = "from mango.x2 import motor",
        Blockly.Python.definitions_["import_utime"] = "import utime"
    );
    let value_power = Blockly.Python.valueToCode(block, 'POWER', Blockly.Python.ORDER_ATOMIC);
    let value_wait = Blockly.Python.valueToCode(block, 'WAIT', Blockly.Python.ORDER_ATOMIC);
    let ms_wait = value_wait * 1000;
    value_power = trimBrackets(value_power);
    // TODO: move robot-car to forward.
    let code = `# turn right\n`;
    code += `motor.tank_right(${value_power})\n`;
    //code += `motor.tank_wait_to_stop(${ms_wait})\n`;
    code += `utime.sleep(${value_wait})\n`;
    code += `motor.tank_stop()\n`;
    return code;
};
Blockly.Python['tank_move'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_["import_mango_motor"] = "from mango.x2 import motor"
    );
    let move_type = block.getFieldValue('MOVE');
    let value_power = Blockly.Python.valueToCode(block, 'POWER', Blockly.Python.ORDER_ATOMIC);
    value_power = trimBrackets(value_power);
    // TODO: select a moving method.
    let code = '';
    code += 'motor.tank_stop()\n';
    code += `motor.${move_type}(${value_power})\n`;
    return code;
};
Blockly.Python['tank_move_wait'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_["import_mango_motor"] = "from mango.x2 import motor",
        Blockly.Python.definitions_["import_utime"] = "import utime"
    );
    let move_type = block.getFieldValue('MOVE');
    let value_power = Blockly.Python.valueToCode(block, 'POWER', Blockly.Python.ORDER_ATOMIC);
    let value_wait = Blockly.Python.valueToCode(block, 'WAIT', Blockly.Python.ORDER_ATOMIC);
    value_power = trimBrackets(value_power);
    let ms_wait = value_wait * 1000;
    // TODO: select a moving method.
    let code = '';
    code += `motor.${move_type}(${value_power})\n`;
    //code += `motor.tank_wait_to_stop(${ms_wait})\n`;
    code += `utime.sleep(${value_wait})\n`;
    code += `motor.tank_stop()\n`;
    return code;
};
Blockly.Python['tank_move_power'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_["import_mango_motor"] = "from mango.x2 import motor",
        Blockly.Python.definitions_.import_utime = "import utime"
    );
    let left_power = Blockly.Python.valueToCode(block, 'LEFT_POWER', Blockly.Python.ORDER_ATOMIC);
    let right_power = Blockly.Python.valueToCode(block, 'RIGHT_POWER', Blockly.Python.ORDER_ATOMIC);
    left_power = trimBrackets(left_power);
    right_power = trimBrackets(right_power);
    // TODO: turn wheels on.
    let code = '';
    code += `motor.tank_move(${right_power}, ${left_power})\n`;
    return code;
};
Blockly.Python['tank_move_power_wait'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_["import_mango_motor"] = "from mango.x2 import motor",
        Blockly.Python.definitions_["import_utime"] = "import utime"
    );
    let left_power = Blockly.Python.valueToCode(block, 'LEFT_POWER', Blockly.Python.ORDER_ATOMIC);
    let right_power = Blockly.Python.valueToCode(block, 'RIGHT_POWER', Blockly.Python.ORDER_ATOMIC);
    let value_wait = Blockly.Python.valueToCode(block, 'WAIT', Blockly.Python.ORDER_ATOMIC);
    left_power = trimBrackets(left_power);
    right_power = trimBrackets(right_power);
    let ms_wait = value_wait * 1000;
    // TODO: turn wheels on.
    let code = '';
    code += `motor.tank_move(${right_power}, ${left_power})\n`;
    //code += `motor.tank_wait_to_stop(${ms_wait})\n`;
    code += `utime.sleep(${value_wait})\n`;
    return code;
};
Blockly.Python['tank_stop_move'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_["import_mango_motor"] = "from mango.x2 import motor"
    );
    // TODO: stop robot-car moving.
    let code = `motor.tank_stop()\n`;
    return code;
};
Blockly.Python['tank_wait_move'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_["import_mango_motor"] = "from mango.x2 import motor",
        Blockly.Python.definitions_.import_utime = "import utime"
    );
    let value_wait = Blockly.Python.valueToCode(block, 'WAIT', Blockly.Python.ORDER_ATOMIC);
    let wait_sec = value_wait * 1000;
    // TODO: Assemble Python into code variable.
    let code = `# wait to move\n`;
    code += `motor.tank_wait_allow_move(${wait_sec})\n`;
    return code;
};
Blockly.Python['tank_wait_stop'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_["import_mango_motor"] = "from mango.x2 import motor",
        Blockly.Python.definitions_.import_utime = "import utime"
    );
    let value_wait = Blockly.Python.valueToCode(block, 'WAIT', Blockly.Python.ORDER_ATOMIC);
    let wait_sec = value_wait * 1000;
    // TODO: Assemble Python into code variable.
    let code = `# wait to stop\n`;
    code += `motor.tank_wait_to_stop(${wait_sec})\n`;
    return code;
};
Blockly.Python['tank_state'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_["import_mango_motor"] = "from mango.x2 import motor"
    );
    let dropdown_state = block.getFieldValue('STATE');
    // TODO: Assemble Python into code variable.
    let code = `motor.tankState.is_stop`;
    if(dropdown_state == 'M') {
        code = 'not motor.tankState.is_stop';
    }
    return [code, Blockly.Python.ORDER_FUNCTION_CALL];
};
Blockly.Python['tank_direct'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_["import_mango_motor"] = "from mango.x2 import motor"
    );
    let dropdown_op = block.getFieldValue('OP');
    let dropdown_state = block.getFieldValue('STATE');
    // TODO: Assemble Python into code variable.
    let code = `motor.tank_is_state([${dropdown_state}])`;
    if(dropdown_op == "!=") {
        code = "not " + code;
    }
    return [code, Blockly.Python.ORDER_FUNCTION_CALL];
};
Blockly.Python['tank_force_stop'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_["import_mango_motor"] = "from mango.x2 import motor"
    );
    // TODO: stop robot-car moving.
    let code = `motor.tank_close()\n`;
    code += 'motor.tankState.reset()\n';
    return code;
};
// servo
Blockly.Python['tank_servo_position'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_["import_mango_servo"] = "from mango.x2 import servo"
    );
    let servo_num = block.getFieldValue('SERVO');
    let value_angle = Blockly.Python.valueToCode(block, 'ANGLE', Blockly.Python.ORDER_ATOMIC);
    // TODO: select a moving method.
    let code = '';
    code += `servo.servo${servo_num}.position(${value_angle})\n`;
    return code;
};
Blockly.Python['tank_servo_release'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_["import_mango_servo"] = "from mango.x2 import servo"
    );
    let servo_num = block.getFieldValue('SERVO');
    // TODO: select a moving method.
    let code = '';
    if(servo_num == "all") {
        code += "servo.servo1.release()\n";
        code += "servo.servo2.release()\n";
    } else {
        code += `servo.servo${servo_num}.release()\n`;
    }
    return code;
};
Blockly.Python['tank_servo_max_angle'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_["import_mango_servo"] = "from mango.x2 import servo"
    );
    let servo_num = block.getFieldValue('SERVO');
    let value_angle = Blockly.Python.valueToCode(block, 'ANGLE', Blockly.Python.ORDER_ATOMIC);
    // TODO: select a moving method.
    let code = '';
    code += `servo.servo${servo_num}.set_limit(0, ${value_angle})\n`;
    return code;
};