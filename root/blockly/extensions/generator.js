/*
 * code generation for mangoblock
 * last update: 2022.07.02
 */


/*** functions ***/
let getGlobalVariables = function (block) {
    for (var n, l = [], e = block.workspace, r = (0, Blockly.Variables.allUsedVarModels)(e) || [], y = 0; n = r[y]; y++) n = n.name, -1 === block.getVars().indexOf(n) && l.push(Blockly.Python.nameDB_.getName(n, Blockly.Names.NameType.VARIABLE));
    for (e = (0, Blockly.Variables.allDeveloperVariables)(e), r = 0; r < e.length; r++) l.push(Blockly.Python.nameDB_.getName(e[r], Blockly.Names.NameType.DEVELOPER_VARIABLE));
    e = l.length ? Blockly.Python.INDENT + "global " + l.join(", ") + "\n" : "", l = Blockly.Python.nameDB_.getName(block.getFieldValue("NAME"), Blockly.Names.NameType.PROCEDURE), r = "",
    Blockly.Python.STATEMENT_PREFIX && (r += Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX, block)), Blockly.Python.STATEMENT_SUFFIX && (r += Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX, block)), r && (r = Blockly.Python.prefixLines(r, Blockly.Python.INDENT)), y = "", Blockly.Python.INFINITE_LOOP_TRAP && (y = Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.INFINITE_LOOP_TRAP, block), Blockly.Python.INDENT)), n = Blockly.Python.statementToCode(block, "STACK");
    return e;
};
/*** Project ***/
Blockly.Python.project_metadata = function(block) {
    let value_project_author = Blockly.Python.valueToCode(block, 'AUTHOR', Blockly.Python.ORDER_ATOMIC);
    let value_project_description = Blockly.Python.valueToCode(block, 'DESCRIPTION', Blockly.Python.ORDER_ATOMIC);
    let today  = new Date();
    Blockly.Python.headers_.startLine = '###############################################';
    Blockly.Python.headers_.code      = '# Code automatically generated by MangoBlock';
    Blockly.Python.headers_.author    = '# Author: ' + value_project_author;
    Blockly.Python.headers_.desc      = '# Description: ' + value_project_description;
    Blockly.Python.headers_.date      = "# Date: " + today.toLocaleString();
    Blockly.Python.headers_.endLine = '###############################################\n';
    return "";
};

/*** System ***/
Blockly.Python.sys_print = function(block) {
    let value_text = Blockly.Python.valueToCode(block, 'TEXT', Blockly.Python.ORDER_ATOMIC);
    if(value_text.startsWith('(')) {
        value_text = value_text.substring(1,value_text.length-1);
    }
    let code = `print(${value_text})\n`;
    return code;
};

/*** Events ***/
Blockly.Python.on_start = function(block) {
    let today  = new Date();
    Blockly.Python.headers_.startLine = "###############################################",
        Blockly.Python.headers_.code      = "# Code automatically generated by MangoBlock",
        Blockly.Python.headers_.date      = "# Date: " + today.toLocaleString();
    Blockly.Python.headers_.endLine = "###############################################\n";
    return "\n";
};
Blockly.Python.events_play_click = function(block) {
    let today  = new Date();
    Blockly.Python.headers_.startLine = "###############################################",
        Blockly.Python.headers_.code      = "# Code automatically generated by MangoBlock",
        Blockly.Python.headers_.date      = "# Date: " + today.toLocaleString();
    Blockly.Python.headers_.endLine = "###############################################\n";
    return "\n";
};
Blockly.Python.on_pico_start = function(block) {
    let today  = new Date();
    Blockly.Python.headers_.startLine = "###############################################",
    Blockly.Python.headers_.code      = "# Code automatically generated by MangoBlock",
    Blockly.Python.headers_.date      = "# Date: " + today.toLocaleString();
    Blockly.Python.headers_.endLine = "###############################################\n";
    block.disabled || (
        Blockly.Python.definitions_.import_machine_pin = "from machine import Pin",
        Blockly.Python.definitions_.import_machine_adc = "from machine import ADC",
        Blockly.Python.definitions_.import_utime = "import utime"
    );
	return "\n";
};
Blockly.Python.on_pico_x2_start = function(block) {
    let today  = new Date();
    Blockly.Python.headers_.startLine = "###############################################",
    Blockly.Python.headers_.code      = "# Code automatically generated by MangoBlock",
    Blockly.Python.headers_.date      = "# Date: " + today.toLocaleString();
    Blockly.Python.headers_.endLine = "###############################################\n";
    block.disabled || (
        Blockly.Python.definitions_.import_mango_motor = "from mango.x2 import motor",
        Blockly.Python.definitions_.import_mango_rgb = "from mango.x2 import rgb",
        Blockly.Python.definitions_.import_mango_utils = "from mango import utils",
        Blockly.Python.definitions_.import_board = "import board",
        Blockly.Python.definitions_.import_utime = "import utime"
    );
    return "\n";
};
Blockly.Python.events_declare = function(block) {
    let today  = new Date();
    Blockly.Python.headers_.startLine = "###############################################";
    Blockly.Python.headers_.code      = "# Code automatically generated by MangoBlock";
    Blockly.Python.headers_.date      = "# Date: " + today.toLocaleString();
    Blockly.Python.headers_.endLine   = "###############################################";
    return "\n";
};
Blockly.Python.events_main_procedures = function(block) {
    let today  = new Date();
    Blockly.Python.headers_.startLine = "###############################################";
    Blockly.Python.headers_.code      = "# Code automatically generated by MangoBlock";
    Blockly.Python.headers_.date      = "# Date: " + today.toLocaleString();
    Blockly.Python.headers_.endLine   = "###############################################";

    let var_list = getGlobalVariables(block);
    let statements_start = Blockly.Python.statementToCode(block, 'START');
    let statements_end = Blockly.Python.statementToCode(block, 'END');
    let code = "# main\n";
    code += "def break_process():\n";
    code += var_list;
    if(statements_end == '') {
        code += Blockly.Python.INDENT+'pass\n';
    }
    code += statements_end + '\n';
    code += "def main():\n";
    code += var_list;
    if(statements_start == '') {
        code += Blockly.Python.INDENT+'pass\n';
    }
    code += statements_start + '\n';
    code += 'try:\n' + Blockly.Python.INDENT + 'main()\n';
    code += 'except KeyboardInterrupt:\n';
    code += Blockly.Python.INDENT+'print("break")\n';
    code += Blockly.Python.INDENT+'break_process()\n';
    return code;
};

/*** Async or Thread ***/
Blockly.Python['thread_task'] = function(block) {       
    let statements_code = Blockly.Python.statementToCode(block, 'CODE');
    block.disabled || (
        Blockly.Python.definitions_.import_thread = "import _thread"
    );    
    Blockly.Variables.id_num = Blockly.Variables.id_num + 1;
    let id = Blockly.Variables.id_num;    
    let code = `def threadTask_${id}():\n`;
    code += getGlobalVariables(block);
    if(statements_code == '') {
        code += Blockly.Python.INDENT+'pass\n';
    }
    else {
        code += statements_code+'\n';
    }    
    code += `_thread.start_new_thread(threadTask_${id}, ())\n`;
    Blockly.Python.definitions_["def_thread_"+id] = code;
    return "";
};
Blockly.Python['when_timer_tick'] = function(block) {
    let value_id = block.getFieldValue('ID');
    let value_wait = Blockly.Python.valueToCode(block, 'WAIT', Blockly.Python.ORDER_ATOMIC);
    let statements_code = Blockly.Python.statementToCode(block, 'CODE');
    block.disabled || (
        Blockly.Python.definitions_.import_timer = "from machine import Timer"
    );
    value_wait = value_wait * 1000;
    let id = 'timer' + value_id;    
    Blockly.Python.declares_["let_"+id] = id + ' = Timer()\n';
    let code = `def ${id}_tick(timer):\n`;
    code += getGlobalVariables(block);
    code += statements_code+'\n';
    code += `${id}.init(mode=Timer.PERIODIC, period=${value_wait}, callback=${id}_tick)\n`;
    Blockly.Python.definitions_["def_timer"+id+"_event"] = code;
    return "";
};

/*** Controls ***/
Blockly.Python.wait_sec = function(block) {
    block.disabled || (
        Blockly.Python.definitions_.import_utime = "import utime"
    );
    let value_wait = Blockly.Python.valueToCode(block, 'WAIT', Blockly.Python.ORDER_ATOMIC);
    let code = `utime.sleep(${value_wait})\n`;
    return code;
};
Blockly.Python.controls_for = function(block) {
    let variable_var = Blockly.Python.nameDB_.getName(block.getFieldValue('VAR'), 'VARIABLE');
    let value_from = Blockly.Python.valueToCode(block, 'FROM', Blockly.Python.ORDER_ATOMIC);
    let value_to = Blockly.Python.valueToCode(block, 'TO', Blockly.Python.ORDER_ATOMIC);
    let value_by = Blockly.Python.valueToCode(block, 'BY', Blockly.Python.ORDER_ATOMIC);
    let statements_code = Blockly.Python.statementToCode(block, 'CODE');    
    value_to = parseInt(value_to, 10) + 1;
    let code = `for ${variable_var} in range(${value_from}, ${value_to}, ${value_by}):\n`;
    code += statements_code;
    return code;
};
Blockly.Python.controls_repeat = function(block) {
    let value_repeat = Blockly.Python.valueToCode(block, 'NUMBER', Blockly.Python.ORDER_ATOMIC);
    let statements_code = Blockly.Python.statementToCode(block, 'CODE');
    let code = '';
    code += `for i in range(${value_repeat}):\n`;
    code += `${statements_code}`;
    return code;
};
Blockly.Python.controls_forever = function(block) {
    let statements_code = Blockly.Python.statementToCode(block, 'CODE');
    let code = `while True:\n`;
    code += `${statements_code}`;
    return code;
};
Blockly.Python.controls_break = function(block) {
    let code = `break\n`;
    return code;
};
Blockly.Python.controls_continue = function(block) {
    let code = `continue\n`;
    return code;
};
Blockly.Python.controls_pass = function(block) {
    let code = `pass\n`;
    return code;
};
Blockly.Python.controls_if = function(a) {
    var b = 0,
        c = "";
    Blockly.Python.STATEMENT_PREFIX && (c += Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX, a));
    do {
        var d = Blockly.Python.valueToCode(a, "IF" + b, Blockly.Python.ORDER_NONE) || "False";
        var e = Blockly.Python.statementToCode(a, "DO" + b) || Blockly.Python.PASS;
        Blockly.Python.STATEMENT_SUFFIX && (e = Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX, a), Blockly.Python.INDENT) + e);
        c += (0 == b ? "if " : "elif ") + d + ":\n" + e;
        ++b
    } while (a.getInput("IF" +
        b));
    if (a.getInput("ELSE") || Blockly.Python.STATEMENT_SUFFIX) e = Blockly.Python.statementToCode(a, "ELSE") || Blockly.Python.PASS, Blockly.Python.STATEMENT_SUFFIX && (e = Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX, a), Blockly.Python.INDENT) + e), c += "else:\n" + e;
    return c
};
Blockly.Python.controls_ifelse = Blockly.Python.controls_if;
Blockly.Python.controls_repeat_until = function(block) {
    let boolean_repeat = Blockly.Python.valueToCode(block, 'REPEAT', Blockly.Python.ORDER_ATOMIC);
    let statements_code = Blockly.Python.statementToCode(block, 'CODE');
    let code = `while True:\n`;
    code += Blockly.Python.INDENT+`if ${boolean_repeat}:\n`;
    code += Blockly.Python.INDENT+Blockly.Python.INDENT+`break\n`;
    code += statements_code;
    return code;
};
Blockly.Python.controls_while = function(block) {
    let statements_main_code = Blockly.Python.statementToCode(block, 'main_code');    
    let code = '';
    code += 'while True:\n'
    code += statements_main_code;
    return code;
};
Blockly.Python.try_catch = function(block) {
    let statements_main_code = Blockly.Python.statementToCode(block, 'main_code');
    let statements_catch_code = Blockly.Python.statementToCode(block, 'catch_code');   
    let code = '';
    code += 'try:\n';
    code += statements_main_code;
    code += 'except:\n';
    code += statements_catch_code;
    return code;
};

/*** Logic ***/
Blockly.Python['logic_compare_eq'] = function(block) {
    let value_a = Blockly.Python.valueToCode(block, 'A', Blockly.Python.ORDER_ATOMIC);
    let value_b = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_ATOMIC);
    value_a = trimFirstLastBrackets(value_a);
    value_b = trimFirstLastBrackets(value_b);
    let code = `${value_a} == ${value_b}`;
    return [code, Blockly.Python.ORDER_NONE];
};
Blockly.Python['logic_compare_more_then'] = function(block) {
    let value_a = Blockly.Python.valueToCode(block, 'A', Blockly.Python.ORDER_ATOMIC);
    let value_b = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_ATOMIC);
    value_a = trimFirstLastBrackets(value_a);
    value_b = trimFirstLastBrackets(value_b);
    let code = `${value_a} > ${value_b}`;
    return [code, Blockly.Python.ORDER_NONE];
};
Blockly.Python['logic_compare_less_then'] = function(block) {
    let value_a = Blockly.Python.valueToCode(block, 'A', Blockly.Python.ORDER_ATOMIC);
    let value_b = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_ATOMIC);
    value_a = trimFirstLastBrackets(value_a);
    value_b = trimFirstLastBrackets(value_b);
    let code = `${value_a} < ${value_b}`;
    return [code, Blockly.Python.ORDER_NONE];
};
Blockly.Python['logic_operation_and'] = function(block) {
    let value_a = Blockly.Python.valueToCode(block, 'A', Blockly.Python.ORDER_ATOMIC);
    let value_b = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_ATOMIC);
    value_a = trimFirstLastBrackets(value_a);
    value_b = trimFirstLastBrackets(value_b);
    let code = `${value_a} and ${value_b}`;
    return [code, Blockly.Python.ORDER_NONE];
};
Blockly.Python['logic_operation_or'] = function(block) {
    let value_a = Blockly.Python.valueToCode(block, 'A', Blockly.Python.ORDER_ATOMIC);
    let value_b = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_ATOMIC);
    value_a = trimFirstLastBrackets(value_a);
    value_b = trimFirstLastBrackets(value_b);
    let code = `${value_a} or ${value_b}`;
    return [code, Blockly.Python.ORDER_NONE];
};
Blockly.Python['logic_operation_eq'] = function(block) {
    let value_a = Blockly.Python.valueToCode(block, 'A', Blockly.Python.ORDER_ATOMIC);
    let value_b = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_ATOMIC);
    value_a = trimFirstLastBrackets(value_a);
    value_b = trimFirstLastBrackets(value_b);    
    let code = `${value_a} == ${value_b}`;
    return [code, Blockly.Python.ORDER_NONE];
};

/*** Time ***/
Blockly.Python['delay'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_.import_utime = "import utime"
    );
    let value_time = Blockly.Python.valueToCode(block, 'TIME', Blockly.Python.ORDER_ATOMIC);
    let dropdown_scale = block.getFieldValue('SCALE');
    let code = '';
    code +=  `utime.${dropdown_scale}(${value_time})\n`;
    return code;
};
Blockly.Python['delay_sec'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_.import_utime = "import utime"
    );
    let value_time = block.getFieldValue('TIME');
    let code = '';
    code += 'utime.sleep(' + value_time + ')\n';
    return code;
};
Blockly.Python['delay_ms'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_.import_utime = "import utime"
    );
    let value_time = block.getFieldValue('TIME');
    let code = '';
    code += 'utime.sleep_ms(' + value_time + ')\n';
    return code;
};
Blockly.Python['delay_us'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_.import_utime = "import utime"
    );
    let value_time = block.getFieldValue('TIME');
    let code = '';
    code += 'utime.sleep_us(' + value_time + ')\n';
    return code;
};

/*** Math ***/
Blockly.Python['math_percentage'] = function(block) {
    let number_per = block.getFieldValue('PER');
    let code = `${number_per}`;
    return [code, Blockly.Python.ORDER_NONE];
};
Blockly.Python['math_rgb'] = function(block) {
    let value_num = block.getFieldValue('NUM');
    let code = `${value_num}`;
    return [code, Blockly.Python.ORDER_NONE];
};
Blockly.Python['math_percentage_dropdown'] = function(block) {
    let number_per = block.getFieldValue('PER');
    let code = `${number_per}`;
    return [code, Blockly.Python.ORDER_NONE];
};
Blockly.Python['var_to_int'] = function(block) {
    let variable = Blockly.Python.valueToCode(block, 'var', Blockly.Python.ORDER_ATOMIC);
    let code = 'int(' + variable + ')';
    return [code, Blockly.Python.ORDER_NONE];
};
Blockly.Python['var_to_float'] = function(block) {
    let variable = Blockly.Python.valueToCode(block, 'var', Blockly.Python.ORDER_ATOMIC);
    let code = 'float(' + variable + ')';
    return [code, Blockly.Python.ORDER_NONE];
};

/*** Text ***/
Blockly.Python['text_join'] = function(block) {
    let value_a = Blockly.Python.valueToCode(block, 'a', Blockly.Python.ORDER_ATOMIC);
    let value_b = Blockly.Python.valueToCode(block, 'b', Blockly.Python.ORDER_ATOMIC);   
    value_a = trimBrackets(value_a);
    value_b = trimBrackets(value_b);
    let code = `${value_a} , ${value_b}`;
    return [code, Blockly.Python.ORDER_NONE];
};
Blockly.Python['text_join_single'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_.import_mango_utils = "from mango import utils"
    );
    let txt_label = Blockly.Python.valueToCode(block, 'LABEL', Blockly.Python.ORDER_ATOMIC);
    let join_text = block.getFieldValue('JOIN_TEXT');
    let txt_value = Blockly.Python.valueToCode(block, 'VALUE', Blockly.Python.ORDER_ATOMIC);    
    txt_value = typeof txt_value === "number"? "str"+txt_value:trimBrackets(txt_value);
    let code = `${txt_label} + '${join_text}' + utils.get_string(${txt_value})`;
    return [code, Blockly.Python.ORDER_NONE];
};
Blockly.Python['text_to_str'] = function(block) {
    let variable = Blockly.Python.valueToCode(block, 'var', Blockly.Python.ORDER_ATOMIC);
    let code = 'str(' + variable + ')';
    return [code, Blockly.Python.ORDER_NONE];
};


/*** chip: rp2 ***/
Blockly.Python.pico_pinout = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_machine_pin"] = "from machine import Pin",
        Blockly.Python.definitions_.import_board = "import board"
    );
    let pin = block.getFieldValue('PIN');
    return [pin, Blockly.Python.ORDER_NONE];
};
Blockly.Python.pico_digital_pinout = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_machine_pin"] = "from machine import Pin",
        Blockly.Python.definitions_.import_board = "import board"
    );
    let pin = block.getFieldValue('PIN');
    return [pin, Blockly.Python.ORDER_NONE];
};
Blockly.Python.pico_analog_pinout = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_machine_adc"] = "from machine import ADC",
        Blockly.Python.definitions_.import_board = "import board"
    );
    let pin = block.getFieldValue('PIN');
    return [pin, Blockly.Python.ORDER_NONE];
};
Blockly.Python.pico_i2c_pinout = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_machine_pin"] = "from machine import Pin",
        Blockly.Python.definitions_.import_board = "import board"
    );
    let pin = block.getFieldValue('PIN');
    return [pin, Blockly.Python.ORDER_NONE];
};
Blockly.Python.pico_set_pin = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_machine_pin"] = "from machine import Pin",
        Blockly.Python.definitions_.import_board = "import board"
    );
    let value_pin = Blockly.Python.valueToCode(block, 'PIN', Blockly.Python.ORDER_ATOMIC);
    let dropdown_mode = block.getFieldValue('MODE');
    let dropdown_pull = block.getFieldValue('PULL');    
    value_pin = trimBrackets(value_pin);
    let pin = 'GP' + value_pin;
    let func = `board.${pin} = Pin(${value_pin}, ${dropdown_mode}, ${dropdown_pull})\n`;
    Blockly.Python.declares_["let_"+pin] = func;
    let code = ``;
    return code;
};
Blockly.Python.pico_set_digital = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_machine_pin"] = "from machine import Pin",
        Blockly.Python.definitions_.import_board = "import board"
    );
    let value_pin = Blockly.Python.valueToCode(block, 'PIN', Blockly.Python.ORDER_ATOMIC);
    let dropdown_value = block.getFieldValue('VALUE');
    value_pin = trimBrackets(value_pin);
    let pin = 'GP' + value_pin;
    let func = `board.${pin} = Pin(${value_pin}, Pin.OUT)\n`;
    Blockly.Python.declares_["let_"+pin] = func;
    let code = `board.${pin}.value(${dropdown_value})\n`;
    return code;
};
Blockly.Python.pico_set_pwm = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_machine_pin"] = "from machine import Pin",
        Blockly.Python.definitions_["import_machine_pwm"] = "from machine import PWM",
        Blockly.Python.definitions_.import_board = "import board"
    );
    var value_pin = Blockly.Python.valueToCode(block, 'PIN', Blockly.Python.ORDER_ATOMIC);
    var number_pwm = Blockly.Python.valueToCode(block, 'PWM', Blockly.Python.ORDER_ATOMIC);
    value_pin = trimBrackets(value_pin);
    let pin = 'GP' + value_pin;
    let func = `board.${pin} = PWM(Pin(${value_pin}, Pin.OUT))\n`;
    Blockly.Python.declares_["let_"+pin] = func;
    let code = `board.${pin}.duty_u16(${number_pwm})\n`;
    return code;
  };
Blockly.Python.pico_read_button = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_machine_pin"] = "from machine import Pin",
        Blockly.Python.definitions_.import_board = "import board"
    );
    let value_pin = Blockly.Python.valueToCode(block, 'PIN', Blockly.Python.ORDER_ATOMIC);
    value_pin = trimBrackets(value_pin);
    let pin = 'GP' + value_pin;
    let func = `board.${pin} = Pin(${value_pin}, Pin.IN, Pin.PULL_DOWN)`;
    Blockly.Python.declares_["let_"+pin] = func;
    let code = `board.${pin}.value()`;
    return[code, Blockly.Python.ORDER_NONE]
};
Blockly.Python.pico_read_digital = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_machine_pin"] = "from machine import Pin",
        Blockly.Python.definitions_.import_board = "import board"
    );
    let value_pin = Blockly.Python.valueToCode(block, 'PIN', Blockly.Python.ORDER_ATOMIC);
    value_pin = trimBrackets(value_pin);
    let pin = 'GP' + value_pin;
    let func = `board.${pin} = Pin(${value_pin}, Pin.IN)`;
    block.disabled||(
        Blockly.Python.declares_["let_"+pin] = func
    );
    let code = `board.${pin}.value()`;
    return[code, Blockly.Python.ORDER_NONE]
};
Blockly.Python.pico_read_analog = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_machine_adc"] = "from machine import ADC",
        Blockly.Python.definitions_.import_board = "import board"
    );
    let value_pin = Blockly.Python.valueToCode(block, 'PIN', Blockly.Python.ORDER_ATOMIC);
    value_pin = trimBrackets(value_pin);
    let pin = 'GP' + value_pin;
    let func = `board.${pin} = ADC(${value_pin})`;
    Blockly.Python.declares_[pin] = func;
    let code = `board.${pin}.read_u16()`;
    return[code, Blockly.Python.ORDER_NONE]
};
Blockly.Python.pico_chip_temperature = function(block){
    block.disabled||(
        Blockly.Python.definitions_["import_machine_adc"] = "from machine import ADC"
    );
    Blockly.Python.declares_["let_sensor_temp"] = "sensor_temp = ADC(4)";
    Blockly.Python.declares_["let_conversion_factor"] = "conversion_factor = 3.3 / (65535)";
    let func = "def read_temperature(scale):\n";
    func += "\treading = sensor_temp.read_u16() * conversion_factor\n";
    func += "\ttemperature = 27 - (reading - 0.706)/0.001721\n";
    func += "\tif scale!='CELSIUS':\n";
    func += "\t\ttemperature = temperature * 9 / 5 + 32\n";
    func += "\treturn temperature";
    Blockly.Python.definitions_['def_read_temperature'] = func;
    let s = block.getFieldValue("UNIT");
    let code = "read_temperature('" + s + "')";
    return[code, Blockly.Python.ORDER_NONE]
};

/*** chip: rp2-pico-w ***/
Blockly.Python.picow_pinout = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_machine_pin"] = "from machine import Pin",
        Blockly.Python.definitions_.import_board = "import board"
    );
    let pin = block.getFieldValue('PIN');
    return [pin, Blockly.Python.ORDER_NONE];
};
Blockly.Python.picow_digital_pinout = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_machine_pin"] = "from machine import Pin",
        Blockly.Python.definitions_.import_board = "import board"
    );
    let pin = block.getFieldValue('PIN');
    return [pin, Blockly.Python.ORDER_NONE];
};
Blockly.Python.picow_set_digital = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_machine_pin"] = "from machine import Pin",
        Blockly.Python.definitions_.import_board = "import board"
    );
    let value_pin = Blockly.Python.valueToCode(block, 'PIN', Blockly.Python.ORDER_ATOMIC);
    let dropdown_value = block.getFieldValue('VALUE');
    value_pin = trimBrackets(value_pin);
    let pin = 'GP' + value_pin;    
    if(value_pin=="LED") {
        pin = 'LED';
        value_pin = "'LED'";
    }    
    let func = `board.${pin} = Pin(${value_pin}, Pin.OUT)\n`;
    Blockly.Python.declares_["let_"+pin] = func;
    let code = `board.${pin}.value(${dropdown_value})\n`;
    return code;
};


/*** display: rgb ***/
Blockly.Python.color_picker = function(block) {
    let value_color = block.getFieldValue('COLOR');
    let code = `${value_color}`;
    return [code, Blockly.Python.ORDER_NONE];
};
Blockly.Python['rgb_color'] = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_mango_utils"] = "from mango import utils"
    );
    let value_r = Blockly.Python.valueToCode(block, 'R', Blockly.Python.ORDER_ATOMIC);
    let value_g = Blockly.Python.valueToCode(block, 'G', Blockly.Python.ORDER_ATOMIC);
    let value_b = Blockly.Python.valueToCode(block, 'B', Blockly.Python.ORDER_ATOMIC);
    let r = trimBrackets(value_r);
    let g = trimBrackets(value_g);
    let b = trimBrackets(value_b);
    let color_hex = utils.rgb2hex(r, g, b);
    let code = color_hex;
    return [code, Blockly.Python.ORDER_NONE];
};
Blockly.Python['rgb_turn_on'] = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_mango_rgb"] = "from mango.x2 import rgb"
    );
    let value_led = block.getFieldValue('LED');
    let value_color = Blockly.Python.valueToCode(block, 'COLOR', Blockly.Python.ORDER_ATOMIC);
    value_color = trimColor(value_color);
    let code = ''
    if(value_led === "all") {
        code += `rgb.rgbFills(rgb.leds, '${value_color}')\n`;
    }
    else {
        code += `rgb.rgbTurnOn(rgb.leds, ${value_led}, '${value_color}')\n`;
    }
    return code;
};
Blockly.Python['rgb_turn_on_num'] = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_mango_rgb"] = "from mango.x2 import rgb"
    );
    let value_num = Blockly.Python.valueToCode(block, 'NUM', Blockly.Python.ORDER_ATOMIC);
    let value_color = Blockly.Python.valueToCode(block, 'COLOR', Blockly.Python.ORDER_ATOMIC);
    value_color = trimColor(value_color);
    value_num = parseInt(value_num) - 1;
    let code = ''
    code += `rgb.rgbTurnOn(rgb.leds, ${value_num}, '${value_color}')\n`;
    return code;
};
Blockly.Python['rgb_turn_on_range'] = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_mango_rgb"] = "from mango.x2 import rgb"
    );
    let value_from = Blockly.Python.valueToCode(block, 'FROM_NUM', Blockly.Python.ORDER_ATOMIC);
    let value_to = Blockly.Python.valueToCode(block, 'TO_NUM', Blockly.Python.ORDER_ATOMIC);
    let value_color = Blockly.Python.valueToCode(block, 'COLOR', Blockly.Python.ORDER_ATOMIC);
    value_color = trimColor(value_color);
    value_from = parseInt(value_from) - 1;
    value_to = parseInt(value_to) - 1;
    let code = ''
    code += `rgb.rgbTurnOnRange(rgb.leds, ${value_from}, ${value_to}, '${value_color}')\n`;
    return code;
};
Blockly.Python['rgb_turn_on_wait'] = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_mango_rgb"] = "from mango.x2 import rgb",
        Blockly.Python.definitions_.import_utime = "import utime"
    );
    let dropdown_led = block.getFieldValue('LED');
    let value_color = Blockly.Python.valueToCode(block, 'COLOR', Blockly.Python.ORDER_ATOMIC);
    let value_wait = Blockly.Python.valueToCode(block, 'WAIT', Blockly.Python.ORDER_ATOMIC);
    value_color = trimColor(value_color);
    let code = ``;
    if(dropdown_led === "all") {
        code += `rgb.rgbFills(rgb.leds, '${value_color}')\n`;
    }
    else {
        code += `rgb.rgbTurnOn(rgb.leds, ${dropdown_led}, '${value_color}')\n`;
    }
    code += `utime.sleep(${value_wait})\n`;
    code += `rgb.rgbClose(rgb.leds)\n`;
    return code;
};
Blockly.Python['rgb_matrix'] = function(block) {
    let color0 = block.getFieldValue('COLOR0');
    let color1 = block.getFieldValue('COLOR1');
    let color2 = block.getFieldValue('COLOR2');
    let color3 = block.getFieldValue('COLOR3');
    let color4 = block.getFieldValue('COLOR4');
    let color5 = block.getFieldValue('COLOR5');
    let color6 = block.getFieldValue('COLOR6');
    let color7 = block.getFieldValue('COLOR7');
    let color8 = block.getFieldValue('COLOR8');
    let color9 = block.getFieldValue('COLOR9');
    let code = `colorList = ['${color0}','${color1}','${color2}','${color3}','${color4}'`;
    code += `,'${color5}','${color6}','${color7}','${color8}','${color9}']`;
    return [code, Blockly.Python.ORDER_NONE];
};
Blockly.Python['rgb_matrix_wait'] = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_mango_rgb"] = "from mango.x2 import rgb",
        Blockly.Python.definitions_["import_utime"] = "import utime"
    );
    let color_hex0 = block.getFieldValue('COLOR0');
    let color_hex1 = block.getFieldValue('COLOR1');
    let color_hex2 = block.getFieldValue('COLOR2');
    let color_hex3 = block.getFieldValue('COLOR3');
    let color_hex4 = block.getFieldValue('COLOR4');
    let color_hex5 = block.getFieldValue('COLOR5');
    let color_hex6 = block.getFieldValue('COLOR6');
    let color_hex7 = block.getFieldValue('COLOR7');
    let color_hex8 = block.getFieldValue('COLOR8');
    let color_hex9 = block.getFieldValue('COLOR9');
    let number_wait = block.getFieldValue('WAIT');
    let code = `colorList = ['${color_hex0}','${color_hex1}','${color_hex2}','${color_hex3}','${color_hex4}'`;
    code += `,'${color_hex5}','${color_hex6}','${color_hex7}','${color_hex8}','${color_hex9}']\n`;
    code += `rgb.rgbMatrix(rgb.leds, colorList)\n`;
    code += `utime.sleep(${number_wait})\n`;
    code += `rgb.rgbClose(rgb.leds)\n`;
    return code;
};
Blockly.Python['rgb_demo'] = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_mango_rgb"] = "from mango.x2 import rgb"
    );
    let value_effect = block.getFieldValue('EFFECT');
    let value_from = Blockly.Python.valueToCode(block, 'FROM_NUM', Blockly.Python.ORDER_ATOMIC);
    let value_to = Blockly.Python.valueToCode(block, 'TO_NUM', Blockly.Python.ORDER_ATOMIC);
    let value_wait = Blockly.Python.valueToCode(block, 'WAIT', Blockly.Python.ORDER_ATOMIC);
    value_from = parseInt(value_from) - 1;
    value_to = parseInt(value_to) - 1;
    let code = "";
    if(value_effect === "rainbow") {
        code += `rgb.rgbRainbowRange(rgb.leds, ${value_from}, ${value_to}, ${value_wait})\n`;
    }
    else if (value_effect === "chases") {
        code += "for color in rgb.ws2812.COLORS:\n";
        code += `\trgb.rgbChaseRange(rgb.leds, color, ${value_from}, ${value_to}, ${value_wait})\n`;
    }
    code += 'rgb.rgbClose(rgb.leds)\n';
    return code;
};
Blockly.Python['rgb_chases'] = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_mango_rgb"] = "from mango.x2 import rgb"
    );
    let code = `rgb.rgbChases(rgb.leds)\n`;
    return code;
};
Blockly.Python['rgb_rainbow'] = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_mango_rgb"] = "from mango.x2 import rgb"
    );
    let code = `rgb.rgbRainbow(rgb.leds)\n`;
    return code;
};
Blockly.Python['rgb_following'] = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_mango_rgb"] = "from mango.x2 import rgb"
    );
    let value_color = Blockly.Python.valueToCode(block, 'COLOR', Blockly.Python.ORDER_ATOMIC);
    value_color = trimColor(value_color);
    let code = `rgb.rgbFollowing(rgb.leds, '${value_color}')\n`;
    return code;
};
Blockly.Python['rgb_close'] = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_mango_rgb"] = "from mango.x2 import rgb"
    );
    let code = `rgb.rgbClose(rgb.leds)\n`;
    return code;
};
Blockly.Python['rgb_brightness'] = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_mango_rgb"] = "from mango.x2 import rgb"
    );
    let value_num = Blockly.Python.valueToCode(block, 'NUM', Blockly.Python.ORDER_ATOMIC);
    value_num = trimBrackets(value_num);
    let code = '';
    code += `rgb.setBrightness(rgb.leds, ${value_num})\n`;
    return code;
};
Blockly.Python['rgb_set_leds'] = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_mango_rgb"] = "from mango.x2 import rgb"
    );
    let pin_number = block.getFieldValue('PIN');
    let led_count = Blockly.Python.valueToCode(block, 'COUNT', Blockly.Python.ORDER_ATOMIC);    
    let code = `rgb.ledCount=${led_count}\n`;
    code += `rgb.leds = rgb.setLeds(${pin_number}, ${led_count})`;
    Blockly.Python.declares_["let_rgb_strip"] = code;
    return "";
};
Blockly.Python['rgb_set_leds_pin'] = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_mango_rgb"] = "from mango.x2 import rgb"
    );
    let pin_number = Blockly.Python.valueToCode(block, 'PIN', Blockly.Python.ORDER_ATOMIC);
    let led_count = Blockly.Python.valueToCode(block, 'COUNT', Blockly.Python.ORDER_ATOMIC);
    pin_number = trimBrackets(pin_number);
    let code = `rgb.ledCount=${led_count}\n`;
    code += `rgb.leds = rgb.setLeds(${pin_number}, ${led_count})`;
    Blockly.Python.declares_["let_rgb_strip"] = code;
    return "";
};
Blockly.Python['rgb_wait_open'] = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_mango_rgb"] = "from mango.x2 import rgb",
        Blockly.Python.definitions_["import_utime"] = "import utime"
    );
    let value_wait = Blockly.Python.valueToCode(block, 'WAIT', Blockly.Python.ORDER_ATOMIC);
    let wait_sec = value_wait * 1000;
    let code = `# wait to open\n`;
    code += `rgb.rgb_wait_allow_open(${wait_sec})\n`;
    code += 'rgb.rgb_check_allow_open()\n';
    return code;
};
Blockly.Python['rgb_wait_close'] = function(block) {
    block.disabled||(
        Blockly.Python.definitions_["import_mango_rgb"] = "from mango.x2 import rgb",
        Blockly.Python.definitions_["import_utime"] = "import utime"
    );
    let value_wait = Blockly.Python.valueToCode(block, 'WAIT', Blockly.Python.ORDER_ATOMIC);
    let wait_sec = value_wait * 1000;
    let code = `# wait to close\n`;
    code += `rgb.rgb_wait_to_close(${wait_sec})\n`;    
    return code;
};

/*** display: oled ***/
Blockly.Python['oled_color'] = function(block) {
    let color_num = block.getFieldValue('VAL');
    let code = `${color_num}`;
    return [code, Blockly.Python.ORDER_NONE];
};
Blockly.Python['oled_fontsize'] = function(block) {
    let font_num = block.getFieldValue('VAL');
    let code = `${font_num}`;
    return [code, Blockly.Python.ORDER_NONE];
};
Blockly.Python['oled_init'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_.import_board = "import board",
        Blockly.Python.definitions_.import_mango_display = "from mango import display"
    );
    let i2c_number = Blockly.Python.valueToCode(block, 'I2C', Blockly.Python.ORDER_ATOMIC);
    let scl_pin = Blockly.Python.valueToCode(block, 'SCL', Blockly.Python.ORDER_ATOMIC);
    let sda_pin = Blockly.Python.valueToCode(block, 'SDA', Blockly.Python.ORDER_ATOMIC);
    let width = Blockly.Python.valueToCode(block, 'WIDTH', Blockly.Python.ORDER_ATOMIC);
    let height = Blockly.Python.valueToCode(block, 'HEIGHT', Blockly.Python.ORDER_ATOMIC);
    scl_pin = trimBrackets(scl_pin);
    sda_pin = trimBrackets(sda_pin);
    let code = ``;
    code += `display.oled = display.init(${i2c_number},${scl_pin},${sda_pin},${width},${height})`;
    Blockly.Python.declares_["let_display_oled"] = code;
    return "";
};
Blockly.Python['oled_slot'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_.import_mango_display = "from mango import display",
        Blockly.Python.definitions_.import_board = "import board"
    );
    let i2c_number = 0;
    let width = Blockly.Python.valueToCode(block, 'WIDTH', Blockly.Python.ORDER_ATOMIC);
    let height = Blockly.Python.valueToCode(block, 'HEIGHT', Blockly.Python.ORDER_ATOMIC);
    // TODO: turn wheels on.
    let code = ``;
    code += `display.oled = display.init(${i2c_number}, board.PIN_SCL, board.PIN_SDA, ${width}, ${height})`;
    Blockly.Python.declares_["let_display_oled"] = code;
    return "";
};
Blockly.Python['oled_show'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_.import_board = "import board",
        Blockly.Python.definitions_.import_mango_display = "from mango import display"
    );
    let code = `display.oled.show()\n`;
    return code;
};
Blockly.Python['oled_clear'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_.import_board = "import board",
        Blockly.Python.definitions_.import_mango_display = "from mango import display"
    );
    let code = `display.oled.clear()\n`;
    return code;
};
Blockly.Python['oled_write_text'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_.import_mango_display = "from mango import display"
    );
    let pos_x = Blockly.Python.valueToCode(block, 'X', Blockly.Python.ORDER_ATOMIC);
    let pos_y = Blockly.Python.valueToCode(block, 'Y', Blockly.Python.ORDER_ATOMIC);
    let input_text = Blockly.Python.valueToCode(block, 'TEXT', Blockly.Python.ORDER_ATOMIC);
    let text_color = Blockly.Python.valueToCode(block, 'COLOR', Blockly.Python.ORDER_ATOMIC);
    let text_font = Blockly.Python.valueToCode(block, 'FONT', Blockly.Python.ORDER_ATOMIC);
    text_color = trimBrackets(text_color);
    text_font = trimBrackets(text_font);
    let code = ``;
    code += `display.oled.text${text_font}(${input_text}, ${pos_x}, ${pos_y}, ${text_color})\n`;
    return code;
};
Blockly.Python['oled_draw_line'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_.import_mango_display = "from mango import display"
    );
    let x1 = Blockly.Python.valueToCode(block, 'X1', Blockly.Python.ORDER_ATOMIC);
    let y1 = Blockly.Python.valueToCode(block, 'Y1', Blockly.Python.ORDER_ATOMIC);
    let x2 = Blockly.Python.valueToCode(block, 'X2', Blockly.Python.ORDER_ATOMIC);
    let y2 = Blockly.Python.valueToCode(block, 'Y2', Blockly.Python.ORDER_ATOMIC);
    let color = Blockly.Python.valueToCode(block, 'COLOR', Blockly.Python.ORDER_ATOMIC);
    color = trimBrackets(color);
    let code = ``;
    code += `display.oled.line(${x1}, ${y1}, ${x2}, ${y2}, ${color})\n`;
    return code;
};
Blockly.Python['oled_draw_rect'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_.import_mango_display = "from mango import display"
    );
    let x = Blockly.Python.valueToCode(block, 'X', Blockly.Python.ORDER_ATOMIC);
    let y = Blockly.Python.valueToCode(block, 'Y', Blockly.Python.ORDER_ATOMIC);
    let w = Blockly.Python.valueToCode(block, 'WIDTH', Blockly.Python.ORDER_ATOMIC);
    let h = Blockly.Python.valueToCode(block, 'HEIGHT', Blockly.Python.ORDER_ATOMIC);
    let color = Blockly.Python.valueToCode(block, 'COLOR', Blockly.Python.ORDER_ATOMIC);
    color = trimBrackets(color);
    let code = ``;
    code += `display.oled.rect(${x}, ${y}, ${w}, ${h}, ${color})\n`;
    return code;
};
Blockly.Python['oled_draw_circle'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_.import_mango_display = "from mango import display"
    );
    let x = Blockly.Python.valueToCode(block, 'X', Blockly.Python.ORDER_ATOMIC);
    let y = Blockly.Python.valueToCode(block, 'Y', Blockly.Python.ORDER_ATOMIC);
    let r = Blockly.Python.valueToCode(block, 'RADIUS', Blockly.Python.ORDER_ATOMIC);
    let color = Blockly.Python.valueToCode(block, 'COLOR', Blockly.Python.ORDER_ATOMIC);
    color = trimBrackets(color);
    let code = ``;
    code += `display.oled.circle(${x}, ${y}, ${r}, ${color})\n`;
    return code;
};
Blockly.Python['oled_invert'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_.import_mango_display = "from mango import display"
    );
    let colour = block.getFieldValue('COLOUR');
    let code = ``;
    code += `display.oled.invert(${colour})\n`;
    return code;
};


/*** sounds ***/
Blockly.Python['set_sound_player'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_["import_mango_sound"] = "from mango import sound"
    );
    let value_pin = Blockly.Python.valueToCode(block, 'PIN', Blockly.Python.ORDER_ATOMIC);
    Blockly.Python.declares_["let_sound_player"] = 'sound_player = sound.Music()';
    let code = "";
    return code;
};
Blockly.Python['set_sound_tempo'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_["import_mango_sound"] = "from mango import sound"
    );
    let value_beats = Blockly.Python.valueToCode(block, 'BEATS', Blockly.Python.ORDER_ATOMIC);
    Blockly.Python.declares_["let_sound_player"] = 'sound_player = sound.Music()';
    let code = `sound_player.setBeats(${value_beats})\n`;
    return code;
};
Blockly.Python['set_sound_duty'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_["import_mango_sound"] = "from mango import sound"
    );
    let dropdown_volume = block.getFieldValue('VOLUME');
    let volume = parseInt(dropdown_volume) * 1000;
    Blockly.Python.declares_["let_sound_player"] = 'sound_player = sound.Music()';
    let code = `sound_player.setDuty(${volume})\n`;
    return code;
};
Blockly.Python['sound_play_repeat'] = function(block) {
    let value_repeat = Blockly.Python.valueToCode(block, 'NUMBER', Blockly.Python.ORDER_ATOMIC);
    let statements_code = Blockly.Python.statementToCode(block, 'CODE');
    let code = '';
    statements_code = statements_code.trim();
    statements_code = statements_code.substring(0, statements_code.length-1);
    code += `for i in range(${value_repeat}):\n`;
    code += `\tsound_player.playSong([${statements_code}])\n`;
    return code;
};
Blockly.Python['set_play_song'] = function(block) {
    let value_song = Blockly.Python.valueToCode(block, 'SONG', Blockly.Python.ORDER_ATOMIC);
    let code = `sound_player.playSong(${value_song})\n`;
    return code;
};
Blockly.Python['set_sound_close'] = function(block) {
    let code = `sound_player.release()\n`;
    return code;
};

Blockly.Python['music_tone_notes'] = function(block) {
    let dropdown_note = block.getFieldValue('NOTE');
    let code = dropdown_note;
    return [code, Blockly.Python.ORDER_NONE];
};
Blockly.Python['music_tone_beats'] = function(block) {
    let dropdown_beat = block.getFieldValue('BEAT');
    let code = dropdown_beat;
    return [code, Blockly.Python.ORDER_NONE];
};
Blockly.Python['music_tone_item'] = function(block) {
    let value_note = Blockly.Python.valueToCode(block, 'NOTE', Blockly.Python.ORDER_ATOMIC);
    let value_beats = Blockly.Python.valueToCode(block, 'BEATS', Blockly.Python.ORDER_ATOMIC);
    value_note = trimBrackets(value_note);
    value_beats = trimBrackets(value_beats);
    let code = `'${value_note} ${value_beats}'`;
    return [code, Blockly.Python.ORDER_NONE];
};
Blockly.Python['music_create'] = function(block) {
    let variable_name = Blockly.Python.nameDB_.getName(block.getFieldValue('NAME'), 'VARIABLE');
    let dropdown_instrument = block.getFieldValue('Instrument');
    let statements_code = Blockly.Python.statementToCode(block, 'CODE');
    statements_code = statements_code.trim();
    statements_code = statements_code.slice(0, -1);
    Blockly.Python.declares_["let_music_"+variable_name] = `${variable_name} = [${statements_code}]`;
    let code = ``;
    return code;
};
Blockly.Python['music_make_tone'] = function(block) {
    let value_item = Blockly.Python.valueToCode(block, 'ITEM', Blockly.Python.ORDER_ATOMIC);
    let code = trimBrackets(value_item) + ",";
    return code;
};
Blockly.Python['music_set_pause'] = function(block) {
    let value_pause = Blockly.Python.valueToCode(block, 'PAUSE', Blockly.Python.ORDER_ATOMIC);
    value_pause = trimBrackets(value_pause);
    let code = `'P ${value_pause}',`;
    return code;
};
Blockly.Python['music_set_loop_start'] = function(block) {
    let value_loop = Blockly.Python.valueToCode(block, 'LOOP', Blockly.Python.ORDER_ATOMIC);
    value_loop = trimBrackets(value_loop);
    let code = `'S ${value_loop}',`;
    return code;
};
Blockly.Python['music_set_loop_end'] = function(block) {
    let code = `'X',`;
    return code;
};

/*** sensor: ultrasound ***/
Blockly.Python['ultrasound_init_pin'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_.import_machine_pin = "from machine import Pin",
        Blockly.Python.definitions_.import_mango_mus025 = "from mango import mus025"
    );
    let trig_pin = Blockly.Python.valueToCode(block, 'TRIGGER', Blockly.Python.ORDER_ATOMIC);
    let echo_pin = Blockly.Python.valueToCode(block, 'ECHO', Blockly.Python.ORDER_ATOMIC);
    trig_pin = trimBrackets(trig_pin);
    echo_pin = trimBrackets(echo_pin);
    let code = `dist_sensor = mus025.MUS025(trig_pin=${trig_pin}, echo_pin=${echo_pin})\n`;    
    Blockly.Python.declares_["let_dist_sensor"] = code;
    return "";
};
Blockly.Python['ultrasound_get_distance'] = function(block) {
    let code = `dist_sensor.ping()`;
    return [code, Blockly.Python.ORDER_NONE];
};

/*** sensor: line follower ***/
Blockly.Python['line_follower_init_pin'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_.import_mango_mit500 = "from mango import mit500"
    );
    let right_pin = Blockly.Python.valueToCode(block, 'right_pin', Blockly.Python.ORDER_ATOMIC);
    let left_pin = Blockly.Python.valueToCode(block, 'left_pin', Blockly.Python.ORDER_ATOMIC);
    right_pin = trimBrackets(right_pin);
    left_pin = trimBrackets(left_pin);
    let code = `line_sensor${left_pin} = mit500.MIT500(sensor_port=3, left_pin=${left_pin}, right_pin=${right_pin})`;
    Blockly.Python.declares_["let_line_sensor"+left_pin] = code;
    return "";
};
Blockly.Python['line_follower_read_pin'] = function(block) {
    block.disabled || (
        Blockly.Python.definitions_.import_board = "import board"
    );
    let value_pin = Blockly.Python.valueToCode(block, 'pin', Blockly.Python.ORDER_ATOMIC);
    value_pin = trimBrackets(value_pin);
    let pin = 'GP' + value_pin;
    let func = `board.${pin} = Pin(${value_pin}, Pin.IN)`;
    block.disabled||(
        Blockly.Python.declares_["let_"+pin] = func
    );
    let code = `board.${pin}.value()`;
    return[code, Blockly.Python.ORDER_NONE]
};

/*** dc motor ***/


/*** servo ***/